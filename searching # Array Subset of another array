//{ Driver Code Starts
//Initial Template for Java

//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main(String[] args) throws IOException
	{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while(t-->0)
        {
            StringTokenizer stt = new StringTokenizer(br.readLine());
            
            long n = Long.parseLong(stt.nextToken());
            long m = Long.parseLong(stt.nextToken());
            long a1[] = new long[(int)(n)];
            long a2[] = new long[(int)(m)];
            
            
            String inputLine[] = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) {
                a1[i] = Long.parseLong(inputLine[i]);
            }
            String inputLine1[] = br.readLine().trim().split(" ");
            for (int i = 0; i < m; i++) {
                a2[i] = Long.parseLong(inputLine1[i]);
            }
            
            
            Compute obj = new Compute();
            System.out.println(obj.isSubset( a1, a2, n, m));
            
        }
	}
}

// } Driver Code Ends



//User function Template for Java


class Compute {
    public String isSubset( long a1[], long a2[], long n, long m) {
//create a hash map 
        HashMap<Long,Integer> hm = new HashMap<>();
//keep each element of a1 in hash with frequency = no of times element appeared
        for(int i=0;i<n;i++)
         hm.put(a1[i],hm.getOrDefault(a1[i],0)+1);
        for(int i=0;i<m;i++)
         {
//if hash map contains a2 element then reduce its frequency so we can checl for elemnts duplicates if they too present or not
            if(hm.containsKey(a2[i]))
             {
                if(hm.get(a2[i])==1)
                 hm.remove(a2[i]);
                else
                 hm.put(a2[i],hm.get(a2[i])-1);
             }
            else
//if element of a2[i] not in hash map means it is not in a1 and a2 is not subset of a1 so return No
                return "No";
         }
//if all elements of a2 in hash map it means all of them in a1 as well and a2 is subset of a1 so return Yes
        return "Yes";
  }
}
